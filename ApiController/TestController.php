<?php

namespace App\ApiController;



use App\Entity\Devis;
use App\Entity\Test;
use App\Repository\DevisRepository;
use App\Repository\FormatRepository;
use App\Repository\MediaRepository;
use App\Repository\OriantationRepository;
use App\Repository\ProprieteRepository;
use App\Repository\QuadrichromieRepository;
use App\Repository\TypeRepository;
use App\Repository\VernisRepository;
use FOS\RestBundle\Controller\AbstractFOSRestController;
use FOS\RestBundle\View\View;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use FOS\RestBundle\Controller\Annotations as Rest;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

/**
 * @Route("/test", host="api.moggar.do")
 */
class TestController extends AbstractFOSRestController
{
  /**
   * @Rest\Post(
   *     path="/create",
   *     name="api_moggar_test_create"
   * )
   */
  public function create( Request $request ): View
  {
    $test = new Test();
    $dataFile = $request->files->get('test');
    $file = $dataFile['file'];
    $dataOther = $request->request->get('test');
    $alternative = $dataOther['alternative'];
    if(!is_null($file)){
      $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

      // Move the file to the directory where brochures are stored
      try {
        $file->move(
          $this->getParameter('image_abs_path'),
          $fileName
        );
      } catch (FileException $e) {
        // ... handle exception if something happens during file upload
      }

      // updates the 'brochure' property to store the PDF file name
      // instead of its contents
      $test->setPath($this->getParameter('image_abs_path').'/'.$fileName);
      $test->setImgPath($this->getParameter('image_path').'/'.$fileName);
      $test->setAlternative($alternative);
      $entityManager = $this->getDoctrine()->getManager();
      $entityManager->persist($test);
      $entityManager->flush();
    }
    return View::create([], Response::HTTP_CREATED);
  }

  private function normalize($object)
  {
    $serializer = new Serializer([new ObjectNormalizer()]);
    $object = $serializer->normalize($object, 'json',
      ['attributes' => [

      ]]);
    return $object;
  }

  /**
   * @return string
   */
  private function generateUniqueFileName()
  {
    // md5() reduces the similarity of the file names generated by
    // uniqid(), which is based on timestamps
    return md5(uniqid());
  }

  private function removeFile($path)
  {
    if(file_exists($path))
    {
      unlink($path);
    }
  }
}
